name: Build and Release Chrome Extension

on:
  release:
    types: [published]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install

    - name: Extract tag version
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "Extracted version: $VERSION"

    - name: Install zip utility and jq
      run: sudo apt-get update && sudo apt-get install -y zip jq

    - name: Create PEM file from secret
      run: |
        echo "${{ secrets.WEB_EXT_PRIVATE_KEY }}" > extension.pem
        echo "PEM file created"
        ls -la extension.pem

    - name: Update manifest.json version
      run: |
        # Update version in manifest.json
        jq '.version = "${{ env.VERSION }}"' public/manifest.json > temp.json
        mv temp.json public/manifest.json

        # Show updated manifest
        cat public/manifest.json

    - name: Build extension
      run: |
        # Run build command
        pnpm run build

    - name: Add public key to manifest
      run: |
        # Extract public key from PEM and add to manifest using Node.js
        if [ -f "extension.pem" ]; then
          echo "PEM file found, extracting public key..."
          node -e "const fs = require('fs'); const crypto = require('crypto'); try { const key = fs.readFileSync('extension.pem'); const pub = crypto.createPublicKey(key).export({type:'spki', format:'der'}); fs.writeFileSync('pubkey.txt', pub.toString('base64')); console.log('Public key extracted successfully'); } catch (e) { console.error('Error extracting public key:', e.message); process.exit(1); }"
          jq --arg key "$(cat pubkey.txt)" '.key = $key' build/manifest.json > temp.json
          mv temp.json build/manifest.json
          echo "Public key added to manifest"
          cat build/manifest.json
        else
          echo "ERROR: Private key file not found!"
          exit 1
        fi

    - name: Prepare extension directory
      run: |
        # Wait for build directory to be created
        # Check for build directory with retry logic
        for i in {1..10}; do
          if [ -d "build" ]; then
            echo "Build directory found"
            break
          fi
          echo "Waiting for build directory... ($i/10)"
          sleep 2
        done
        
        # Verify build directory exists and contains manifest.json
        if [ ! -d "build" ]; then
          echo "Build directory does not exist, exiting"
          exit 1
        fi
        
        # Verify manifest.json exists in the build directory
        if [ ! -f "build/manifest.json" ]; then
          echo "manifest.json not found in build directory"
          exit 1
        fi
        
        # Store the directory for the next steps
        echo "EXT_DIR=build" >> $GITHUB_ENV
        

    - name: Create ZIP package
      run: |
        # Create ZIP file from the extension directory
        cd ${{ env.EXT_DIR }}
        zip -r ../Additional-Miniplayer-${{ env.VERSION }}.zip . -x "*.DS_Store" "__MACOSX/*"
        cd ..

    - name: Install CRX creation tools
      run: |
        # Install crx3 package locally
        pnpm install crx3

    - name: Create CRX package with crx3
      run: |
        # Create CRX file using crx3
        echo "Creating CRX file..."
        echo "Current directory: $(pwd)"
        echo "PEM file status:"
        ls -la extension.pem
        
        # Get absolute path to PEM file
        PEM_PATH="$(pwd)/extension.pem"
        echo "PEM absolute path: $PEM_PATH"
        
        # Create CRX file - crx3 creates web-extension.crx by default
        cd ${{ env.EXT_DIR }}
        npx crx3 . "$PEM_PATH"
        cd ..
        
        # Move and rename the created CRX file
        if [ -f "${{ env.EXT_DIR }}/web-extension.crx" ]; then
          mv "${{ env.EXT_DIR }}/web-extension.crx" "Additional-Miniplayer-${{ env.VERSION }}.crx"
          echo "CRX file created and renamed successfully!"
          ls -lh Additional-Miniplayer-${{ env.VERSION }}.crx
        else
          echo "ERROR: CRX file was not created at expected location!"
          echo "Checking build directory contents:"
          ls -la ${{ env.EXT_DIR }}/
          exit 1
        fi


    - name: List files before upload
      run: |
        echo "Files in root directory:"
        ls -la
        echo "Files in build directory:"
        ls -la build/

    - name: Upload CRX to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./Additional-Miniplayer-${{ env.VERSION }}.crx
        asset_name: Additional-Miniplayer-${{ env.VERSION }}.crx
        asset_content_type: application/octet-stream

    - name: Upload ZIP to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./Additional-Miniplayer-${{ env.VERSION }}.zip
        asset_name: Additional-Miniplayer-${{ env.VERSION }}.zip
        asset_content_type: application/zip